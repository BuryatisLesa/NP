"""
Django settings for NP project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import logging
from django.conf import settings

logger = logging.getLogger('django')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-i#%8o4ub1vnfis%gke!n1cd2@2kgi9o473#62o(94we7z0yz83'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [

    'modeltranslation',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # add apps
    'django.contrib.sites',
    'django.contrib.flatpages', # Пакет плоских страничек
    'newsportal', # Приложение NewsPortal/AnimeNews
    'sorl.thumbnail', # Пакет для редактирование картинок
    'django_filters', # Пакет для фильтрации данных в джанго
    
    #Пакет - allauth
    'allauth', # работа с регистрацией/авторизацией
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    'accounts',
    'profile_user',
    "django_apscheduler",
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
        # allauth
    "allauth.account.middleware.AccountMiddleware",
    # кэширование сайта
    # 'django.middleware.cache.UpdateCacheMiddleware',
    # 'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    # локализация
    'django.middleware.locale.LocaleMiddleware',
    'newsportal.middlewares.TimezoneMiddleware'
]

ROOT_URLCONF = 'NP.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                 # `allauth`
                'django.template.context_processors.request',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'NP.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

#postgreSQL
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru'
LANGUAGES = [('ru', 'Русский'), ('en-us', 'English')]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

MEDIA_ROOT = os.path.join(BASE_DIR,'media/')
MEDIA_URL = '/media/'
LOGIN_REDIRECT_URL = "/"
LOOUT_REDIRECT_URL = "/"

# пакет allauth
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
#mandatory — не пускать пользователя на сайт до момента подтверждения почты;
#optional — сообщение о подтверждении почты будет отправлено, но пользователь может залогиниться на сайте без подтверждения почты.
#https://docs.allauth.org/en/latest/account/configuration.html
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}
# email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = "anim.news@yandex.ru"
EMAIL_HOST_PASSWORD = "jzfjrtppxabamvrk"
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True

DEFAULT_FROM_EMAIL = "anim.news@yandex.ru"
SERVER_EMAIL = "anim.news@yandex.ru"
MANAGERS = (('AnimeNews', 'anim.news.@yandex.ru'), ('example', 'example@yandex.ru'))
ADMINS = [('AnimeNews', 'anim.news.@yandex.ru')]  # Адреса для получения уведомлений

# redis/celery

# указывает на URL брокера сообщений (Redis). По умолчанию он находится на порту 6379.
CELERY_BROKER_URL = 'redis://localhost:6379'
# указывает на хранилище результатов выполнения задач.
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
# допустимый формат данных.
CELERY_ACCEPT_CONTENT = ['application/json']
# метод сериализации задач.
CELERY_TASK_SERIALIZER = 'json'
# метод сериализации результатов.
CELERY_RESULT_SERIALIZER = 'json'
# системное кэширование
# кэширование одной страницы
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}
# для кэширование всего сайта
# CACHES = {
#     'default': {
#         'TIMEOUT': 60, # добавляем стандартное время ожидания в минуту (по умолчанию это 5 минут — 300 секунд)
#         'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
#         'LOCATION': os.path.join(BASE_DIR, 'cache_files'), 
#     }
# }

# логгирование
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'debug_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: settings.DEBUG,  # Отправка в консоль только если DEBUG = True
        },
        'non_debug_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not settings.DEBUG,  # Отправка в почту и файл только если DEBUG = False
        },
    },
    'formatters': {
        'detailed_debug': {
            'format': '|{asctime}| - |{levelname}| - |{message}|',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',  # формат даты и времени
        },
        'detailed_warning': {
            'format': '{asctime} - {levelname} - {pathname} - {message} - {exc_info}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S.%f',  # формат даты с миллисекундами
        },
        'detailed_errors': {
            'format': '{asctime} - {levelname} - {pathname} - {message} - {exc_info}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S.%f',  # формат даты с миллисекундами
        },
        'recording_info': {
            'format': '{asctime} - {levelname} - {module} - {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',  # формат даты и времени
        },
        'recording_errors': {
            'format':
            '{asctime} - {levelname} - {message} - Path: {pathname} - {exc_info}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',  # формат даты и времени
        },
        'recording_security': {
            'format': '{asctime} - {levelname} - {module} - {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',  # формат даты и времени
        },
        'email_formatter': {
            'format': '{asctime} - {levelname} - {message} - Path: {pathname} - {exc_info}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console_debug': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'detailed_debug',
            'filters': ['debug_filter'],
        },
        'console_warning': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'detailed_warning',
        },
        'console_errors': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'detailed_errors',
        },
        'general_log': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/general.log',  # файл, куда записываются ошибки
            'formatter': 'recording_info',
            'filters': ['non_debug_filter'],    
        },
        'errors_log': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'logs/errors.log',  # файл, куда записываются ошибки
            'formatter': 'recording_errors',
        },
        'security_log': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/security.log',
            'formatter': 'recording_security',
        },
        'mail_handler': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'email_formatter',
            'filters': ['non_debug_filter'],
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console_debug','console_errors', 'console_warning',
                         'general_log'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['errors_log', 'mail_handler'],
            'level': 'ERROR',
            'filters': ['non_debug_filter'],
            'propagate': True,
        },
        'django.server': {
            'handlers': ['errors_log', 'mail_handler'],
            'level': 'ERROR',
            'filters': ['non_debug_filter'],
            'propagate': True,
        },
        'django.template': {
            'handlers': ['errors_log'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['errors_log'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security_log'],
            'level': 'INFO',
            'propagate': True,
        },
    }
}

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]
